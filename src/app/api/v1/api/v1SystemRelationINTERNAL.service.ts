/**
 * OS2Kitos API - V1
 * <b><i>OBS: Dokumentation for V2 findes ved at skifte version på dokumentet til 2 øverst på siden</i></b><br/><br/><b>BEMÆRK: Ekstern Adgang TIL størstedelen af API V1 LUKKES. <a href=\'https://os2web.atlassian.net/wiki/spaces/KITOS/pages/657293331/API+Design+V1#Varsling-om-lukning\'>LÆS MERE HER</a>.</b><br/><br/><b>BEMÆRK: Lukningen påvirker ikke authorize endpointet</b><br/><br/>
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { APISystemRelationDTOApiReturnDTO } from '../model/aPISystemRelationDTOApiReturnDTO';
// @ts-ignore
import { APISystemRelationDTOArrayApiReturnDTO } from '../model/aPISystemRelationDTOArrayApiReturnDTO';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


export interface GETSINGLESystemRelationGetAccessRightsRequestParams {
    getEntitiesAccessRights: boolean;
    organizationId: number;
}

export interface GETSINGLESystemRelationGetAccessRightsForEntityByIdRequestParams {
    id: number;
    getEntityAccessRights: boolean;
}

export interface GETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageidRequestParams {
    fromSystemUsageId: number;
    toSystemUsageId: number;
}

export interface GETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationidRequestParams {
    /** Systemanvendelsen der ejer relation */
    systemUsageId: number;
    /** Id på systemrelationen */
    relationId: number;
}

export interface GETSINGLESystemRelationGetRelationsAssociatedWithContractByContractidRequestParams {
    contractId: number;
}

export interface GETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationidRequestParams {
    organizationId: number;
    /** Sidenummer. Interval: [0,int.MaxValue] */
    pageNumber: number;
    /** Sidestørrelse dvs. antal resultater pr. forespørgsel. Interval: [1,100] */
    pageSize: number;
}

export interface GETSINGLESystemRelationGetRelationsFromSystemBySystemusageidRequestParams {
    systemUsageId: number;
}

export interface GETSINGLESystemRelationGetRelationsToSystemBySystemusageidRequestParams {
    systemUsageId: number;
}

export interface GETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageidRequestParams {
    fromSystemUsageId: number;
    /** valgfri navnesøgning */
    nameContent: string;
    /** Antal resultater der ønskers (maksimum 25) */
    amount: number;
}


@Injectable({
  providedIn: 'root'
})
export class APIV1SystemRelationINTERNALService {

    protected basePath = 'https://kitos-dev.strongminds.dk';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETSINGLESystemRelationGetAccessRights(requestParameters: GETSINGLESystemRelationGetAccessRightsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<object>;
    public gETSINGLESystemRelationGetAccessRights(requestParameters: GETSINGLESystemRelationGetAccessRightsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<object>>;
    public gETSINGLESystemRelationGetAccessRights(requestParameters: GETSINGLESystemRelationGetAccessRightsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<object>>;
    public gETSINGLESystemRelationGetAccessRights(requestParameters: GETSINGLESystemRelationGetAccessRightsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        const getEntitiesAccessRights = requestParameters.getEntitiesAccessRights;
        if (getEntitiesAccessRights === null || getEntitiesAccessRights === undefined) {
            throw new Error('Required parameter getEntitiesAccessRights was null or undefined when calling gETSINGLESystemRelationGetAccessRights.');
        }
        const organizationId = requestParameters.organizationId;
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling gETSINGLESystemRelationGetAccessRights.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (getEntitiesAccessRights !== undefined && getEntitiesAccessRights !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>getEntitiesAccessRights, 'getEntitiesAccessRights');
        }
        if (organizationId !== undefined && organizationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>organizationId, 'organizationId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/SystemRelation`;
        return this.httpClient.request<object>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETSINGLESystemRelationGetAccessRightsForEntityById(requestParameters: GETSINGLESystemRelationGetAccessRightsForEntityByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<object>;
    public gETSINGLESystemRelationGetAccessRightsForEntityById(requestParameters: GETSINGLESystemRelationGetAccessRightsForEntityByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<object>>;
    public gETSINGLESystemRelationGetAccessRightsForEntityById(requestParameters: GETSINGLESystemRelationGetAccessRightsForEntityByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<object>>;
    public gETSINGLESystemRelationGetAccessRightsForEntityById(requestParameters: GETSINGLESystemRelationGetAccessRightsForEntityByIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling gETSINGLESystemRelationGetAccessRightsForEntityById.');
        }
        const getEntityAccessRights = requestParameters.getEntityAccessRights;
        if (getEntityAccessRights === null || getEntityAccessRights === undefined) {
            throw new Error('Required parameter getEntityAccessRights was null or undefined when calling gETSINGLESystemRelationGetAccessRightsForEntityById.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (getEntityAccessRights !== undefined && getEntityAccessRights !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>getEntityAccessRights, 'getEntityAccessRights');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/SystemRelation/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<object>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Henter en liste over gyldige valgmuligheder til oprettelse af relationen.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageid(requestParameters: GETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<object>;
    public gETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageid(requestParameters: GETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<object>>;
    public gETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageid(requestParameters: GETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<object>>;
    public gETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageid(requestParameters: GETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        const fromSystemUsageId = requestParameters.fromSystemUsageId;
        if (fromSystemUsageId === null || fromSystemUsageId === undefined) {
            throw new Error('Required parameter fromSystemUsageId was null or undefined when calling gETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageid.');
        }
        const toSystemUsageId = requestParameters.toSystemUsageId;
        if (toSystemUsageId === null || toSystemUsageId === undefined) {
            throw new Error('Required parameter toSystemUsageId was null or undefined when calling gETSINGLESystemRelationGetAvailableOptionsByFromsystemusageidAndTosystemusageid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/systemrelations/options/${this.configuration.encodeParam({name: "fromSystemUsageId", value: fromSystemUsageId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/in-relation-to/${this.configuration.encodeParam({name: "toSystemUsageId", value: toSystemUsageId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<object>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Henter en enkelt systemrelation
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationid(requestParameters: GETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<APISystemRelationDTOApiReturnDTO>;
    public gETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationid(requestParameters: GETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<APISystemRelationDTOApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationid(requestParameters: GETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<APISystemRelationDTOApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationid(requestParameters: GETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        const systemUsageId = requestParameters.systemUsageId;
        if (systemUsageId === null || systemUsageId === undefined) {
            throw new Error('Required parameter systemUsageId was null or undefined when calling gETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationid.');
        }
        const relationId = requestParameters.relationId;
        if (relationId === null || relationId === undefined) {
            throw new Error('Required parameter relationId was null or undefined when calling gETSINGLESystemRelationGetRelationFromSystemBySystemusageidAndRelationid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/systemrelations/from/${this.configuration.encodeParam({name: "systemUsageId", value: systemUsageId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/${this.configuration.encodeParam({name: "relationId", value: relationId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<APISystemRelationDTOApiReturnDTO>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Henter alle systemrelationer der er relateret til kontrakten specificeret af {!:contractId}
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETSINGLESystemRelationGetRelationsAssociatedWithContractByContractid(requestParameters: GETSINGLESystemRelationGetRelationsAssociatedWithContractByContractidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<APISystemRelationDTOArrayApiReturnDTO>;
    public gETSINGLESystemRelationGetRelationsAssociatedWithContractByContractid(requestParameters: GETSINGLESystemRelationGetRelationsAssociatedWithContractByContractidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<APISystemRelationDTOArrayApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationsAssociatedWithContractByContractid(requestParameters: GETSINGLESystemRelationGetRelationsAssociatedWithContractByContractidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<APISystemRelationDTOArrayApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationsAssociatedWithContractByContractid(requestParameters: GETSINGLESystemRelationGetRelationsAssociatedWithContractByContractidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        const contractId = requestParameters.contractId;
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling gETSINGLESystemRelationGetRelationsAssociatedWithContractByContractid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/systemrelations/associated-with/contract/${this.configuration.encodeParam({name: "contractId", value: contractId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<APISystemRelationDTOArrayApiReturnDTO>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Henter alle systemrelationer der er defineret i organisationen.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationid(requestParameters: GETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<APISystemRelationDTOArrayApiReturnDTO>;
    public gETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationid(requestParameters: GETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<APISystemRelationDTOArrayApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationid(requestParameters: GETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<APISystemRelationDTOArrayApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationid(requestParameters: GETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        const organizationId = requestParameters.organizationId;
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling gETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationid.');
        }
        const pageNumber = requestParameters.pageNumber;
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling gETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationid.');
        }
        const pageSize = requestParameters.pageSize;
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling gETSINGLESystemRelationGetRelationsDefinedInOrganizationByOrganizationid.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'pageNumber');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/systemrelations/defined-in/organization/${this.configuration.encodeParam({name: "organizationId", value: organizationId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<APISystemRelationDTOArrayApiReturnDTO>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Henter alle systemrelationer FRA systemanvendelsen specificeret af {!:systemUsageId}
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETSINGLESystemRelationGetRelationsFromSystemBySystemusageid(requestParameters: GETSINGLESystemRelationGetRelationsFromSystemBySystemusageidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<APISystemRelationDTOArrayApiReturnDTO>;
    public gETSINGLESystemRelationGetRelationsFromSystemBySystemusageid(requestParameters: GETSINGLESystemRelationGetRelationsFromSystemBySystemusageidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<APISystemRelationDTOArrayApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationsFromSystemBySystemusageid(requestParameters: GETSINGLESystemRelationGetRelationsFromSystemBySystemusageidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<APISystemRelationDTOArrayApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationsFromSystemBySystemusageid(requestParameters: GETSINGLESystemRelationGetRelationsFromSystemBySystemusageidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        const systemUsageId = requestParameters.systemUsageId;
        if (systemUsageId === null || systemUsageId === undefined) {
            throw new Error('Required parameter systemUsageId was null or undefined when calling gETSINGLESystemRelationGetRelationsFromSystemBySystemusageid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/systemrelations/from/${this.configuration.encodeParam({name: "systemUsageId", value: systemUsageId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<APISystemRelationDTOArrayApiReturnDTO>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Henter alle systemrelationer TIL systemanvendelsen specificeret af {!:systemUsageId}
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETSINGLESystemRelationGetRelationsToSystemBySystemusageid(requestParameters: GETSINGLESystemRelationGetRelationsToSystemBySystemusageidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<APISystemRelationDTOArrayApiReturnDTO>;
    public gETSINGLESystemRelationGetRelationsToSystemBySystemusageid(requestParameters: GETSINGLESystemRelationGetRelationsToSystemBySystemusageidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<APISystemRelationDTOArrayApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationsToSystemBySystemusageid(requestParameters: GETSINGLESystemRelationGetRelationsToSystemBySystemusageidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<APISystemRelationDTOArrayApiReturnDTO>>;
    public gETSINGLESystemRelationGetRelationsToSystemBySystemusageid(requestParameters: GETSINGLESystemRelationGetRelationsToSystemBySystemusageidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        const systemUsageId = requestParameters.systemUsageId;
        if (systemUsageId === null || systemUsageId === undefined) {
            throw new Error('Required parameter systemUsageId was null or undefined when calling gETSINGLESystemRelationGetRelationsToSystemBySystemusageid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/systemrelations/to/${this.configuration.encodeParam({name: "systemUsageId", value: systemUsageId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<APISystemRelationDTOArrayApiReturnDTO>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Henter en liste over lokale it-systemer som systemet med id: {!:fromSystemUsageId} kan relateres til.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageid(requestParameters: GETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<object>;
    public gETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageid(requestParameters: GETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<object>>;
    public gETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageid(requestParameters: GETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<object>>;
    public gETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageid(requestParameters: GETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        const fromSystemUsageId = requestParameters.fromSystemUsageId;
        if (fromSystemUsageId === null || fromSystemUsageId === undefined) {
            throw new Error('Required parameter fromSystemUsageId was null or undefined when calling gETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageid.');
        }
        const nameContent = requestParameters.nameContent;
        if (nameContent === null || nameContent === undefined) {
            throw new Error('Required parameter nameContent was null or undefined when calling gETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageid.');
        }
        const amount = requestParameters.amount;
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling gETSINGLESystemRelationGetSystemUsagesWhichCanBeRelatedToByFromsystemusageid.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (nameContent !== undefined && nameContent !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nameContent, 'nameContent');
        }
        if (amount !== undefined && amount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amount, 'amount');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/systemrelations/options/${this.configuration.encodeParam({name: "fromSystemUsageId", value: fromSystemUsageId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}/systems-which-can-be-related-to`;
        return this.httpClient.request<object>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
