/**
 * OS2Kitos API - V2
 * <b><i>OBS: Dokumentation for V1 (authorize endpoint) findes ved at skifte version på dokumentet til 1 øverst på siden</i></b><br/><br/>KITOS API V2 understøtter både læse- og skriveoperationer for de væsentlige registreringsobjekter i KITOS. <br/><br/>Se mere om designet og konventionerne i API\'et her: <a href=\'https://os2web.atlassian.net/wiki/spaces/KITOS/pages/2059599873/API+Design+V2\'>API V2</a>.<br/><br/>Generelt er anvendelsen af KITOS API(er) beskrevet på projektets <a href=\'https://os2web.atlassian.net/wiki/spaces/KITOS/pages/658145384/S+dan+kommer+du+igang\'>Confluence side</a>.<br/><br/><b>KENDTE FEJL OG BEGRÆNSNINGER PÅ DENNE HJÆLPESIDE SAMT WORKAROUND</b><br/>Felter der består af lister af enum værdier vises ikke rigtigt i denne UI. Konkret vises de mulige valg ikke, men i stedet vises \'Array[string]\'. For et retvisende billede af dokumentationen anbefales derfor følgende workaround:<br/><br/>- JSON downloades via \'docs linket i toppen\'<br/>- Indholdet indsættes i anden editor f.eks. <a href=\'https://editor.swagger.io\' target=\'_blank\'>Swagger.io</a><br/><br/><b>BEMÆRK</b>: Funktionen \'Try it out\' virker p.t. ikke i den eksterne editor.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { APIImmediateNotificationWriteRequestDTO } from '../model/aPIImmediateNotificationWriteRequestDTO';
// @ts-ignore
import { APINotificationResourcePermissionsDTO } from '../model/aPINotificationResourcePermissionsDTO';
// @ts-ignore
import { APINotificationResponseDTO } from '../model/aPINotificationResponseDTO';
// @ts-ignore
import { APIScheduledNotificationWriteRequestDTO } from '../model/aPIScheduledNotificationWriteRequestDTO';
// @ts-ignore
import { APISentNotificationResponseDTO } from '../model/aPISentNotificationResponseDTO';
// @ts-ignore
import { APIUpdateScheduledNotificationWriteRequestDTO } from '../model/aPIUpdateScheduledNotificationWriteRequestDTO';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class APIV2NotificationINTERNALService {

    protected basePath = 'https://kitos-dev.strongminds.dk';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Deletes a notification
     * @param ownerResourceType 
     * @param ownerResourceUuid 
     * @param notificationUuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dELETENotificationV2DeleteNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dELETENotificationV2DeleteNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dELETENotificationV2DeleteNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dELETENotificationV2DeleteNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (ownerResourceType === null || ownerResourceType === undefined) {
            throw new Error('Required parameter ownerResourceType was null or undefined when calling dELETENotificationV2DeleteNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (ownerResourceUuid === null || ownerResourceUuid === undefined) {
            throw new Error('Required parameter ownerResourceUuid was null or undefined when calling dELETENotificationV2DeleteNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (notificationUuid === null || notificationUuid === undefined) {
            throw new Error('Required parameter notificationUuid was null or undefined when calling dELETENotificationV2DeleteNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/notifications/${this.configuration.encodeParam({name: "ownerResourceType", value: ownerResourceType, in: "path", style: "simple", explode: false, dataType: "'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration'", dataFormat: undefined})}/${this.configuration.encodeParam({name: "ownerResourceUuid", value: ownerResourceUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/${this.configuration.encodeParam({name: "notificationUuid", value: notificationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a notification based on the ownerResourceType and notificationUuid
     * @param ownerResourceType 
     * @param ownerResourceUuid 
     * @param notificationUuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETNotificationV2GetNotificationByUuidOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APINotificationResponseDTO>;
    public gETNotificationV2GetNotificationByUuidOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APINotificationResponseDTO>>;
    public gETNotificationV2GetNotificationByUuidOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APINotificationResponseDTO>>;
    public gETNotificationV2GetNotificationByUuidOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ownerResourceType === null || ownerResourceType === undefined) {
            throw new Error('Required parameter ownerResourceType was null or undefined when calling gETNotificationV2GetNotificationByUuidOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (ownerResourceUuid === null || ownerResourceUuid === undefined) {
            throw new Error('Required parameter ownerResourceUuid was null or undefined when calling gETNotificationV2GetNotificationByUuidOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (notificationUuid === null || notificationUuid === undefined) {
            throw new Error('Required parameter notificationUuid was null or undefined when calling gETNotificationV2GetNotificationByUuidOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/notifications/${this.configuration.encodeParam({name: "ownerResourceType", value: ownerResourceType, in: "path", style: "simple", explode: false, dataType: "'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration'", dataFormat: undefined})}/${this.configuration.encodeParam({name: "ownerResourceUuid", value: ownerResourceUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/${this.configuration.encodeParam({name: "notificationUuid", value: notificationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        return this.httpClient.request<APINotificationResponseDTO>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all notifications owned by the specified ownerResourceType with a matching organizationUuid, which become active after the specified fromDate
     * @param ownerResourceType Filter by owner resource type
     * @param organizationUuid Filter by organization owning the owner resource
     * @param ownerResourceUuid Filter by uuid of owner resource
     * @param onlyActive Only include active notifications
     * @param page 0-based page number. Use this parameter to page through the requested collection.  Offset in the source collection will be (pageSize * page)  Range: [0,2^31] Default: 0  NOTE: This parameter has no effect if \&#39;pageSize\&#39; is left unspecified
     * @param pageSize Size of the page referred by \&#39;page\&#39;.  Range: [1,2^31] Default: null.  If left unspecified, the entire result set will be returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETNotificationV2GetNotificationsUnboundedPaginationQueryPaginationQueryOwnerResourceTypeOwnerResourceTypeBooleanOnlyActiveGuidOrganizationUuidNullable1OwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', organizationUuid: string, ownerResourceUuid?: string, onlyActive?: boolean, page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<APINotificationResponseDTO>>;
    public gETNotificationV2GetNotificationsUnboundedPaginationQueryPaginationQueryOwnerResourceTypeOwnerResourceTypeBooleanOnlyActiveGuidOrganizationUuidNullable1OwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', organizationUuid: string, ownerResourceUuid?: string, onlyActive?: boolean, page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<APINotificationResponseDTO>>>;
    public gETNotificationV2GetNotificationsUnboundedPaginationQueryPaginationQueryOwnerResourceTypeOwnerResourceTypeBooleanOnlyActiveGuidOrganizationUuidNullable1OwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', organizationUuid: string, ownerResourceUuid?: string, onlyActive?: boolean, page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<APINotificationResponseDTO>>>;
    public gETNotificationV2GetNotificationsUnboundedPaginationQueryPaginationQueryOwnerResourceTypeOwnerResourceTypeBooleanOnlyActiveGuidOrganizationUuidNullable1OwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', organizationUuid: string, ownerResourceUuid?: string, onlyActive?: boolean, page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ownerResourceType === null || ownerResourceType === undefined) {
            throw new Error('Required parameter ownerResourceType was null or undefined when calling gETNotificationV2GetNotificationsUnboundedPaginationQueryPaginationQueryOwnerResourceTypeOwnerResourceTypeBooleanOnlyActiveGuidOrganizationUuidNullable1OwnerResourceUuid.');
        }
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling gETNotificationV2GetNotificationsUnboundedPaginationQueryPaginationQueryOwnerResourceTypeOwnerResourceTypeBooleanOnlyActiveGuidOrganizationUuidNullable1OwnerResourceUuid.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (organizationUuid !== undefined && organizationUuid !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>organizationUuid, 'organizationUuid');
        }
        if (ownerResourceUuid !== undefined && ownerResourceUuid !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerResourceUuid, 'ownerResourceUuid');
        }
        if (onlyActive !== undefined && onlyActive !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>onlyActive, 'onlyActive');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/notifications/${this.configuration.encodeParam({name: "ownerResourceType", value: ownerResourceType, in: "path", style: "simple", explode: false, dataType: "'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration'", dataFormat: undefined})}`;
        return this.httpClient.request<Array<APINotificationResponseDTO>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a notification based on the ownerResourceType and notificationUuid
     * @param ownerResourceType 
     * @param ownerResourceUuid 
     * @param notificationUuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETNotificationV2GetPermissionsOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APINotificationResourcePermissionsDTO>;
    public gETNotificationV2GetPermissionsOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APINotificationResourcePermissionsDTO>>;
    public gETNotificationV2GetPermissionsOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APINotificationResourcePermissionsDTO>>;
    public gETNotificationV2GetPermissionsOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ownerResourceType === null || ownerResourceType === undefined) {
            throw new Error('Required parameter ownerResourceType was null or undefined when calling gETNotificationV2GetPermissionsOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (ownerResourceUuid === null || ownerResourceUuid === undefined) {
            throw new Error('Required parameter ownerResourceUuid was null or undefined when calling gETNotificationV2GetPermissionsOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (notificationUuid === null || notificationUuid === undefined) {
            throw new Error('Required parameter notificationUuid was null or undefined when calling gETNotificationV2GetPermissionsOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/notifications/${this.configuration.encodeParam({name: "ownerResourceType", value: ownerResourceType, in: "path", style: "simple", explode: false, dataType: "'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration'", dataFormat: undefined})}/${this.configuration.encodeParam({name: "ownerResourceUuid", value: ownerResourceUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/${this.configuration.encodeParam({name: "notificationUuid", value: notificationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/permissions`;
        return this.httpClient.request<APINotificationResourcePermissionsDTO>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets sent notification information
     * @param ownerResourceType 
     * @param ownerResourceUuid 
     * @param notificationUuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gETNotificationV2GetSentNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<APISentNotificationResponseDTO>>;
    public gETNotificationV2GetSentNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<APISentNotificationResponseDTO>>>;
    public gETNotificationV2GetSentNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<APISentNotificationResponseDTO>>>;
    public gETNotificationV2GetSentNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ownerResourceType === null || ownerResourceType === undefined) {
            throw new Error('Required parameter ownerResourceType was null or undefined when calling gETNotificationV2GetSentNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (ownerResourceUuid === null || ownerResourceUuid === undefined) {
            throw new Error('Required parameter ownerResourceUuid was null or undefined when calling gETNotificationV2GetSentNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (notificationUuid === null || notificationUuid === undefined) {
            throw new Error('Required parameter notificationUuid was null or undefined when calling gETNotificationV2GetSentNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/notifications/${this.configuration.encodeParam({name: "ownerResourceType", value: ownerResourceType, in: "path", style: "simple", explode: false, dataType: "'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration'", dataFormat: undefined})}/${this.configuration.encodeParam({name: "ownerResourceUuid", value: ownerResourceUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/sent/${this.configuration.encodeParam({name: "notificationUuid", value: notificationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        return this.httpClient.request<Array<APISentNotificationResponseDTO>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deactivates the scheduled notification
     * @param ownerResourceType 
     * @param ownerResourceUuid 
     * @param notificationUuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pATCHNotificationV2DeactivateScheduledNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APINotificationResponseDTO>;
    public pATCHNotificationV2DeactivateScheduledNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APINotificationResponseDTO>>;
    public pATCHNotificationV2DeactivateScheduledNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APINotificationResponseDTO>>;
    public pATCHNotificationV2DeactivateScheduledNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ownerResourceType === null || ownerResourceType === undefined) {
            throw new Error('Required parameter ownerResourceType was null or undefined when calling pATCHNotificationV2DeactivateScheduledNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (ownerResourceUuid === null || ownerResourceUuid === undefined) {
            throw new Error('Required parameter ownerResourceUuid was null or undefined when calling pATCHNotificationV2DeactivateScheduledNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (notificationUuid === null || notificationUuid === undefined) {
            throw new Error('Required parameter notificationUuid was null or undefined when calling pATCHNotificationV2DeactivateScheduledNotificationOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/notifications/${this.configuration.encodeParam({name: "ownerResourceType", value: ownerResourceType, in: "path", style: "simple", explode: false, dataType: "'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration'", dataFormat: undefined})}/${this.configuration.encodeParam({name: "ownerResourceUuid", value: ownerResourceUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/scheduled/deactivate/${this.configuration.encodeParam({name: "notificationUuid", value: notificationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        return this.httpClient.request<APINotificationResponseDTO>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates an immediate notifications, which is being sent after creation
     * @param ownerResourceType 
     * @param ownerResourceUuid 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pOSTNotificationV2CreateImmediateNotificationImmediateNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, request: APIImmediateNotificationWriteRequestDTO, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APINotificationResponseDTO>;
    public pOSTNotificationV2CreateImmediateNotificationImmediateNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, request: APIImmediateNotificationWriteRequestDTO, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APINotificationResponseDTO>>;
    public pOSTNotificationV2CreateImmediateNotificationImmediateNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, request: APIImmediateNotificationWriteRequestDTO, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APINotificationResponseDTO>>;
    public pOSTNotificationV2CreateImmediateNotificationImmediateNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, request: APIImmediateNotificationWriteRequestDTO, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ownerResourceType === null || ownerResourceType === undefined) {
            throw new Error('Required parameter ownerResourceType was null or undefined when calling pOSTNotificationV2CreateImmediateNotificationImmediateNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid.');
        }
        if (ownerResourceUuid === null || ownerResourceUuid === undefined) {
            throw new Error('Required parameter ownerResourceUuid was null or undefined when calling pOSTNotificationV2CreateImmediateNotificationImmediateNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling pOSTNotificationV2CreateImmediateNotificationImmediateNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/notifications/${this.configuration.encodeParam({name: "ownerResourceType", value: ownerResourceType, in: "path", style: "simple", explode: false, dataType: "'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration'", dataFormat: undefined})}/${this.configuration.encodeParam({name: "ownerResourceUuid", value: ownerResourceUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/immediate`;
        return this.httpClient.request<APINotificationResponseDTO>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a scheduled notification. The notification will be sent on a specified date, and will repeat for a specified time
     * @param ownerResourceType 
     * @param ownerResourceUuid 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pOSTNotificationV2CreateScheduledNotificationScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, request: APIScheduledNotificationWriteRequestDTO, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APINotificationResponseDTO>;
    public pOSTNotificationV2CreateScheduledNotificationScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, request: APIScheduledNotificationWriteRequestDTO, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APINotificationResponseDTO>>;
    public pOSTNotificationV2CreateScheduledNotificationScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, request: APIScheduledNotificationWriteRequestDTO, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APINotificationResponseDTO>>;
    public pOSTNotificationV2CreateScheduledNotificationScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, request: APIScheduledNotificationWriteRequestDTO, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ownerResourceType === null || ownerResourceType === undefined) {
            throw new Error('Required parameter ownerResourceType was null or undefined when calling pOSTNotificationV2CreateScheduledNotificationScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid.');
        }
        if (ownerResourceUuid === null || ownerResourceUuid === undefined) {
            throw new Error('Required parameter ownerResourceUuid was null or undefined when calling pOSTNotificationV2CreateScheduledNotificationScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling pOSTNotificationV2CreateScheduledNotificationScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidOwnerResourceUuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/notifications/${this.configuration.encodeParam({name: "ownerResourceType", value: ownerResourceType, in: "path", style: "simple", explode: false, dataType: "'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration'", dataFormat: undefined})}/${this.configuration.encodeParam({name: "ownerResourceUuid", value: ownerResourceUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/scheduled`;
        return this.httpClient.request<APINotificationResponseDTO>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the scheduled notification
     * @param ownerResourceType 
     * @param ownerResourceUuid 
     * @param notificationUuid 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pUTNotificationV2UpdateScheduledNotificationUpdateScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, request: APIUpdateScheduledNotificationWriteRequestDTO, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APINotificationResponseDTO>;
    public pUTNotificationV2UpdateScheduledNotificationUpdateScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, request: APIUpdateScheduledNotificationWriteRequestDTO, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APINotificationResponseDTO>>;
    public pUTNotificationV2UpdateScheduledNotificationUpdateScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, request: APIUpdateScheduledNotificationWriteRequestDTO, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APINotificationResponseDTO>>;
    public pUTNotificationV2UpdateScheduledNotificationUpdateScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid(ownerResourceType: 'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration', ownerResourceUuid: string, notificationUuid: string, request: APIUpdateScheduledNotificationWriteRequestDTO, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ownerResourceType === null || ownerResourceType === undefined) {
            throw new Error('Required parameter ownerResourceType was null or undefined when calling pUTNotificationV2UpdateScheduledNotificationUpdateScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (ownerResourceUuid === null || ownerResourceUuid === undefined) {
            throw new Error('Required parameter ownerResourceUuid was null or undefined when calling pUTNotificationV2UpdateScheduledNotificationUpdateScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (notificationUuid === null || notificationUuid === undefined) {
            throw new Error('Required parameter notificationUuid was null or undefined when calling pUTNotificationV2UpdateScheduledNotificationUpdateScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling pUTNotificationV2UpdateScheduledNotificationUpdateScheduledNotificationWriteRequestDTORequestOwnerResourceTypeOwnerResourceTypeGuidNotificationUuidGuidOwnerResourceUuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/notifications/${this.configuration.encodeParam({name: "ownerResourceType", value: ownerResourceType, in: "path", style: "simple", explode: false, dataType: "'ItContract' | 'ItSystemUsage' | 'DataProcessingRegistration'", dataFormat: undefined})}/${this.configuration.encodeParam({name: "ownerResourceUuid", value: ownerResourceUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/scheduled/${this.configuration.encodeParam({name: "notificationUuid", value: notificationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        return this.httpClient.request<APINotificationResponseDTO>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
