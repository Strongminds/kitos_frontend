/**
 * OS2Kitos API - V2
 * <b><i>OBS: Dokumentation for V1 (authorize endpoint) findes ved at skifte version på dokumentet til 1 øverst på siden</i></b><br/><br/>KITOS API V2 understøtter både læse- og skriveoperationer for de væsentlige registreringsobjekter i KITOS. <br/><br/>Se mere om designet og konventionerne i API\'et her: <a href=\'https://os2web.atlassian.net/wiki/spaces/KITOS/pages/2059599873/API+Design+V2\'>API V2</a>.<br/><br/>Generelt er anvendelsen af KITOS API(er) beskrevet på projektets <a href=\'https://os2web.atlassian.net/wiki/spaces/KITOS/pages/658145384/S+dan+kommer+du+igang\'>Confluence side</a>.<br/><br/><b>KENDTE FEJL OG BEGRÆNSNINGER PÅ DENNE HJÆLPESIDE SAMT WORKAROUND</b><br/>Felter der består af lister af enum værdier vises ikke rigtigt i denne UI. Konkret vises de mulige valg ikke, men i stedet vises \'Array[string]\'. For et retvisende billede af dokumentationen anbefales derfor følgende workaround:<br/><br/>- JSON downloades via \'docs linket i toppen\'<br/>- Indholdet indsættes i anden editor f.eks. <a href=\'https://editor.swagger.io\' target=\'_blank\'>Swagger.io</a><br/><br/><b>BEMÆRK</b>: Funktionen \'Try it out\' virker p.t. ikke i den eksterne editor.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { APIBulkRoleAssignmentRequestDTO } from '../model/aPIBulkRoleAssignmentRequestDTO';
// @ts-ignore
import { APICreateOrganizationUnitRequestDTO } from '../model/aPICreateOrganizationUnitRequestDTO';
// @ts-ignore
import { APICreateOrganizationUnitRoleAssignmentRequestDTO } from '../model/aPICreateOrganizationUnitRoleAssignmentRequestDTO';
// @ts-ignore
import { APIDeleteOrganizationUnitRoleAssignmentRequestDTO } from '../model/aPIDeleteOrganizationUnitRoleAssignmentRequestDTO';
// @ts-ignore
import { APIOrganizationUnitResponseDTO } from '../model/aPIOrganizationUnitResponseDTO';
// @ts-ignore
import { APIOrganizationUnitRoleAssignmentResponseDTO } from '../model/aPIOrganizationUnitRoleAssignmentResponseDTO';
// @ts-ignore
import { APIOrganizationUnitRolesResponseDTO } from '../model/aPIOrganizationUnitRolesResponseDTO';
// @ts-ignore
import { APIUnitAccessRightsResponseDTO } from '../model/aPIUnitAccessRightsResponseDTO';
// @ts-ignore
import { APIUnitAccessRightsWithUnitDataResponseDTO } from '../model/aPIUnitAccessRightsWithUnitDataResponseDTO';
// @ts-ignore
import { APIUpdateOrganizationUnitRequestDTO } from '../model/aPIUpdateOrganizationUnitRequestDTO';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


export interface DeleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams {
    organizationUnitUuid: string;
    organizationUuid: string;
    request: APIDeleteOrganizationUnitRoleAssignmentRequestDTO;
}

export interface DeleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuidRequestParams {
    organizationUuid: string;
    organizationUnitUuid: string;
}

export interface GetManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuidRequestParams {
    organizationUuid: string;
    organizationUnitUuid: string;
}

export interface GetSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuidRequestParams {
    organizationUuid: string;
}

export interface GetSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuidRequestParams {
    organizationUuid: string;
    unitUuid: string;
}

export interface PatchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuidRequestParams {
    organizationUuid: string;
    organizationUnitUuid: string;
    parameters: APIUpdateOrganizationUnitRequestDTO;
}

export interface PostSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams {
    organizationUnitUuid: string;
    organizationUuid: string;
    request: APIBulkRoleAssignmentRequestDTO;
}

export interface PostSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams {
    organizationUnitUuid: string;
    organizationUuid: string;
    request: APICreateOrganizationUnitRoleAssignmentRequestDTO;
}

export interface PostSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuidRequestParams {
    organizationUuid: string;
    parameters: APICreateOrganizationUnitRequestDTO;
}


@Injectable({
  providedIn: 'root'
})
export class APIV2OrganizationUnitsInternalINTERNALService {

    protected basePath = 'https://kitos-dev.strongminds.dk';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: DeleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public deleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: DeleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public deleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: DeleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public deleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: DeleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        const organizationUnitUuid = requestParameters.organizationUnitUuid;
        if (organizationUnitUuid === null || organizationUnitUuid === undefined) {
            throw new Error('Required parameter organizationUnitUuid was null or undefined when calling deleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuid.');
        }
        const organizationUuid = requestParameters.organizationUuid;
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling deleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuid.');
        }
        const request = requestParameters.request;
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling deleteSingleOrganizationUnitsInternalV2DeleteRoleAssignmentByOrganizationunituuidAndOrganizationuuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/organizations/${this.configuration.encodeParam({name: "organizationUuid", value: organizationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/organization-units/${this.configuration.encodeParam({name: "organizationUnitUuid", value: organizationUnitUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/roles/delete`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuid(requestParameters: DeleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public deleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuid(requestParameters: DeleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public deleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuid(requestParameters: DeleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public deleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuid(requestParameters: DeleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        const organizationUuid = requestParameters.organizationUuid;
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling deleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuid.');
        }
        const organizationUnitUuid = requestParameters.organizationUnitUuid;
        if (organizationUnitUuid === null || organizationUnitUuid === undefined) {
            throw new Error('Required parameter organizationUnitUuid was null or undefined when calling deleteSingleOrganizationUnitsInternalV2DeleteUnitByOrganizationuuidAndOrganizationunituuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/organizations/${this.configuration.encodeParam({name: "organizationUuid", value: organizationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/organization-units/${this.configuration.encodeParam({name: "organizationUnitUuid", value: organizationUnitUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/delete`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuid(requestParameters: GetManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<APIOrganizationUnitRolesResponseDTO>>;
    public getManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuid(requestParameters: GetManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<APIOrganizationUnitRolesResponseDTO>>>;
    public getManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuid(requestParameters: GetManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<APIOrganizationUnitRolesResponseDTO>>>;
    public getManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuid(requestParameters: GetManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const organizationUuid = requestParameters.organizationUuid;
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling getManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuid.');
        }
        const organizationUnitUuid = requestParameters.organizationUnitUuid;
        if (organizationUnitUuid === null || organizationUnitUuid === undefined) {
            throw new Error('Required parameter organizationUnitUuid was null or undefined when calling getManyOrganizationUnitsInternalV2GetRoleAssignmentsByOrganizationuuidAndOrganizationunituuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/organizations/${this.configuration.encodeParam({name: "organizationUuid", value: organizationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/organization-units/${this.configuration.encodeParam({name: "organizationUnitUuid", value: organizationUnitUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/roles`;
        return this.httpClient.request<Array<APIOrganizationUnitRolesResponseDTO>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuid(requestParameters: GetSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIUnitAccessRightsWithUnitDataResponseDTO>;
    public getSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuid(requestParameters: GetSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIUnitAccessRightsWithUnitDataResponseDTO>>;
    public getSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuid(requestParameters: GetSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIUnitAccessRightsWithUnitDataResponseDTO>>;
    public getSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuid(requestParameters: GetSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const organizationUuid = requestParameters.organizationUuid;
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling getSingleOrganizationUnitsInternalV2GetCollectionPermissionsByOrganizationuuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/organizations/${this.configuration.encodeParam({name: "organizationUuid", value: organizationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/organization-units/all/collection-permissions`;
        return this.httpClient.request<APIUnitAccessRightsWithUnitDataResponseDTO>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuid(requestParameters: GetSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIUnitAccessRightsResponseDTO>;
    public getSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuid(requestParameters: GetSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIUnitAccessRightsResponseDTO>>;
    public getSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuid(requestParameters: GetSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIUnitAccessRightsResponseDTO>>;
    public getSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuid(requestParameters: GetSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const organizationUuid = requestParameters.organizationUuid;
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling getSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuid.');
        }
        const unitUuid = requestParameters.unitUuid;
        if (unitUuid === null || unitUuid === undefined) {
            throw new Error('Required parameter unitUuid was null or undefined when calling getSingleOrganizationUnitsInternalV2GetPermissionsByOrganizationuuidAndUnituuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/organizations/${this.configuration.encodeParam({name: "organizationUuid", value: organizationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/organization-units/${this.configuration.encodeParam({name: "unitUuid", value: unitUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/permissions`;
        return this.httpClient.request<APIUnitAccessRightsResponseDTO>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuid(requestParameters: PatchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<object>;
    public patchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuid(requestParameters: PatchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<object>>;
    public patchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuid(requestParameters: PatchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<object>>;
    public patchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuid(requestParameters: PatchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const organizationUuid = requestParameters.organizationUuid;
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling patchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuid.');
        }
        const organizationUnitUuid = requestParameters.organizationUnitUuid;
        if (organizationUnitUuid === null || organizationUnitUuid === undefined) {
            throw new Error('Required parameter organizationUnitUuid was null or undefined when calling patchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuid.');
        }
        const parameters = requestParameters.parameters;
        if (parameters === null || parameters === undefined) {
            throw new Error('Required parameter parameters was null or undefined when calling patchSingleOrganizationUnitsInternalV2PatchUnitByOrganizationuuidAndOrganizationunituuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/merge-patch+json',
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/organizations/${this.configuration.encodeParam({name: "organizationUuid", value: organizationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/organization-units/${this.configuration.encodeParam({name: "organizationUnitUuid", value: organizationUnitUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/patch`;
        return this.httpClient.request<object>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: parameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIOrganizationUnitResponseDTO>;
    public postSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIOrganizationUnitResponseDTO>>;
    public postSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIOrganizationUnitResponseDTO>>;
    public postSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const organizationUnitUuid = requestParameters.organizationUnitUuid;
        if (organizationUnitUuid === null || organizationUnitUuid === undefined) {
            throw new Error('Required parameter organizationUnitUuid was null or undefined when calling postSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuid.');
        }
        const organizationUuid = requestParameters.organizationUuid;
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling postSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuid.');
        }
        const request = requestParameters.request;
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling postSingleOrganizationUnitsInternalV2CreateBulkRoleAssignmentByOrganizationunituuidAndOrganizationuuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/organizations/${this.configuration.encodeParam({name: "organizationUuid", value: organizationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/organization-units/${this.configuration.encodeParam({name: "organizationUnitUuid", value: organizationUnitUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/roles/bulk/create`;
        return this.httpClient.request<APIOrganizationUnitResponseDTO>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIOrganizationUnitRoleAssignmentResponseDTO>;
    public postSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIOrganizationUnitRoleAssignmentResponseDTO>>;
    public postSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIOrganizationUnitRoleAssignmentResponseDTO>>;
    public postSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const organizationUnitUuid = requestParameters.organizationUnitUuid;
        if (organizationUnitUuid === null || organizationUnitUuid === undefined) {
            throw new Error('Required parameter organizationUnitUuid was null or undefined when calling postSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuid.');
        }
        const organizationUuid = requestParameters.organizationUuid;
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling postSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuid.');
        }
        const request = requestParameters.request;
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling postSingleOrganizationUnitsInternalV2CreateRoleAssignmentByOrganizationunituuidAndOrganizationuuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/organizations/${this.configuration.encodeParam({name: "organizationUuid", value: organizationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/organization-units/${this.configuration.encodeParam({name: "organizationUnitUuid", value: organizationUnitUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/roles/create`;
        return this.httpClient.request<APIOrganizationUnitRoleAssignmentResponseDTO>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<object>;
    public postSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<object>>;
    public postSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<object>>;
    public postSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuid(requestParameters: PostSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuidRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const organizationUuid = requestParameters.organizationUuid;
        if (organizationUuid === null || organizationUuid === undefined) {
            throw new Error('Required parameter organizationUuid was null or undefined when calling postSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuid.');
        }
        const parameters = requestParameters.parameters;
        if (parameters === null || parameters === undefined) {
            throw new Error('Required parameter parameters was null or undefined when calling postSingleOrganizationUnitsInternalV2CreateUnitByOrganizationuuid.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v2/internal/organizations/${this.configuration.encodeParam({name: "organizationUuid", value: organizationUuid, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/organization-units/create`;
        return this.httpClient.request<object>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: parameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
