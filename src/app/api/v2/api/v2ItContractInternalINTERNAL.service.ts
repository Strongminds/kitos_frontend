/**
 * OS2Kitos API - V2
 * <b><i>OBS: Dokumentation for V1 (authorize endpoint) findes ved at skifte version på dokumentet til 1 øverst på siden</i></b><br/><br/>KITOS API V2 understøtter både læse- og skriveoperationer for de væsentlige registreringsobjekter i KITOS. <br/><br/>Se mere om designet og konventionerne i API\'et her: <a href=\'https://os2web.atlassian.net/wiki/spaces/KITOS/pages/2059599873/API+Design+V2\'>API V2</a>.<br/><br/>Generelt er anvendelsen af KITOS API(er) beskrevet på projektets <a href=\'https://os2web.atlassian.net/wiki/spaces/KITOS/pages/658145384/S+dan+kommer+du+igang\'>Confluence side</a>.<br/><br/><b>KENDTE FEJL OG BEGRÆNSNINGER PÅ DENNE HJÆLPESIDE SAMT WORKAROUND</b><br/>Felter der består af lister af enum værdier vises ikke rigtigt i denne UI. Konkret vises de mulige valg ikke, men i stedet vises \'Array[string]\'. For et retvisende billede af dokumentationen anbefales derfor følgende workaround:<br/><br/>- JSON downloades via \'docs linket i toppen\'<br/>- Indholdet indsættes i anden editor f.eks. <a href=\'https://editor.swagger.io\' target=\'_blank\'>Swagger.io</a><br/><br/><b>BEMÆRK</b>: Funktionen \'Try it out\' virker p.t. ikke i den eksterne editor.
 *
 * The version of the OpenAPI document: 2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParameterCodec,
  HttpParams,
  HttpResponse,
} from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { CustomHttpParameterCodec } from '../encoder';

// @ts-ignore
import { APIExtendedRoleAssignmentResponseDTO } from '../model/aPIExtendedRoleAssignmentResponseDTO';
// @ts-ignore
import { APIIdentityNamePairResponseDTO } from '../model/aPIIdentityNamePairResponseDTO';
// @ts-ignore
import { APIItContractResponseDTO } from '../model/aPIItContractResponseDTO';
// @ts-ignore
import { APIRegistrationHierarchyNodeWithActivationStatusResponseDTO } from '../model/aPIRegistrationHierarchyNodeWithActivationStatusResponseDTO';
// @ts-ignore
import { APIRoleAssignmentRequestDTO } from '../model/aPIRoleAssignmentRequestDTO';

// @ts-ignore
import { Configuration } from '../configuration';
import { BASE_PATH } from '../variables';

export interface GetManyItContractInternalV2GetDataProcessingRegistrationsByContractuuidRequestParams {
  contractUuid: string;
  nameQuery?: string;
  pageSize?: number;
}

export interface GetManyItContractInternalV2GetHierarchyByContractuuidRequestParams {
  contractUuid: string;
}

export interface PatchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuidRequestParams {
  contractUuid: string;
  request: APIRoleAssignmentRequestDTO;
}

export interface PatchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuidRequestParams {
  contractUuid: string;
  request: APIRoleAssignmentRequestDTO;
}

@Injectable({
  providedIn: 'root',
})
export class APIV2ItContractInternalINTERNALService {
  protected basePath = 'https://kitos-dev.strongminds.dk';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (Array.isArray(basePath) && basePath.length > 0) {
        basePath = basePath[0];
      }

      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach((elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Get roles assigned to the contract
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getManyItContractInternalV2GetAddRoleAssignmentsByContractuuid(
    requestParameters: GetManyItContractInternalV2GetAddRoleAssignmentsByContractuuidRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<Array<APIExtendedRoleAssignmentResponseDTO>>;
  public getManyItContractInternalV2GetAddRoleAssignmentsByContractuuid(
    requestParameters: GetManyItContractInternalV2GetAddRoleAssignmentsByContractuuidRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpResponse<Array<APIExtendedRoleAssignmentResponseDTO>>>;
  public getManyItContractInternalV2GetAddRoleAssignmentsByContractuuid(
    requestParameters: GetManyItContractInternalV2GetAddRoleAssignmentsByContractuuidRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpEvent<Array<APIExtendedRoleAssignmentResponseDTO>>>;
  public getManyItContractInternalV2GetAddRoleAssignmentsByContractuuid(
    requestParameters: GetManyItContractInternalV2GetAddRoleAssignmentsByContractuuidRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<any> {
    const contractUuid = requestParameters.contractUuid;
    if (contractUuid === null || contractUuid === undefined) {
      throw new Error(
        'Required parameter contractUuid was null or undefined when calling getManyItContractInternalV2GetAddRoleAssignmentsByContractuuid.'
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/v2/internal/it-contracts/${this.configuration.encodeParam({
      name: 'contractUuid',
      value: contractUuid,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'string',
      dataFormat: 'uuid',
    })}/roles`;
    return this.httpClient.request<Array<APIExtendedRoleAssignmentResponseDTO>>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getManyItContractInternalV2GetDataProcessingRegistrationsByContractuuid(
    requestParameters: GetManyItContractInternalV2GetDataProcessingRegistrationsByContractuuidRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<Array<APIIdentityNamePairResponseDTO>>;
  public getManyItContractInternalV2GetDataProcessingRegistrationsByContractuuid(
    requestParameters: GetManyItContractInternalV2GetDataProcessingRegistrationsByContractuuidRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpResponse<Array<APIIdentityNamePairResponseDTO>>>;
  public getManyItContractInternalV2GetDataProcessingRegistrationsByContractuuid(
    requestParameters: GetManyItContractInternalV2GetDataProcessingRegistrationsByContractuuidRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpEvent<Array<APIIdentityNamePairResponseDTO>>>;
  public getManyItContractInternalV2GetDataProcessingRegistrationsByContractuuid(
    requestParameters: GetManyItContractInternalV2GetDataProcessingRegistrationsByContractuuidRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<any> {
    const contractUuid = requestParameters.contractUuid;
    if (contractUuid === null || contractUuid === undefined) {
      throw new Error(
        'Required parameter contractUuid was null or undefined when calling getManyItContractInternalV2GetDataProcessingRegistrationsByContractuuid.'
      );
    }
    const nameQuery = requestParameters.nameQuery;
    const pageSize = requestParameters.pageSize;

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (nameQuery !== undefined && nameQuery !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>nameQuery, 'nameQuery');
    }
    if (pageSize !== undefined && pageSize !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>pageSize, 'pageSize');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/v2/internal/it-contracts/${this.configuration.encodeParam({
      name: 'contractUuid',
      value: contractUuid,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'string',
      dataFormat: 'uuid',
    })}/data-processing-registrations`;
    return this.httpClient.request<Array<APIIdentityNamePairResponseDTO>>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getManyItContractInternalV2GetHierarchyByContractuuid(
    requestParameters: GetManyItContractInternalV2GetHierarchyByContractuuidRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<Array<APIRegistrationHierarchyNodeResponseDTO>>;
  public getManyItContractInternalV2GetHierarchyByContractuuid(
    requestParameters: GetManyItContractInternalV2GetHierarchyByContractuuidRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpResponse<Array<APIRegistrationHierarchyNodeResponseDTO>>>;
  public getManyItContractInternalV2GetHierarchyByContractuuid(
    requestParameters: GetManyItContractInternalV2GetHierarchyByContractuuidRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpEvent<Array<APIRegistrationHierarchyNodeResponseDTO>>>;
  public getManyItContractInternalV2GetHierarchyByContractuuid(
    requestParameters: GetManyItContractInternalV2GetHierarchyByContractuuidRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<any> {
    const contractUuid = requestParameters.contractUuid;
    if (contractUuid === null || contractUuid === undefined) {
      throw new Error(
        'Required parameter contractUuid was null or undefined when calling getManyItContractInternalV2GetHierarchyByContractuuid.'
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/v2/internal/it-contracts/${this.configuration.encodeParam({
      name: 'contractUuid',
      value: contractUuid,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'string',
      dataFormat: 'uuid',
    })}/hierarchy`;
    return this.httpClient.request<Array<APIRegistrationHierarchyNodeWithActivationStatusResponseDTO>>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public patchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuid(
    requestParameters: PatchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuidRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<APIItContractResponseDTO>;
  public patchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuid(
    requestParameters: PatchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuidRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpResponse<APIItContractResponseDTO>>;
  public patchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuid(
    requestParameters: PatchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuidRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpEvent<APIItContractResponseDTO>>;
  public patchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuid(
    requestParameters: PatchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuidRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<any> {
    const contractUuid = requestParameters.contractUuid;
    if (contractUuid === null || contractUuid === undefined) {
      throw new Error(
        'Required parameter contractUuid was null or undefined when calling patchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuid.'
      );
    }
    const request = requestParameters.request;
    if (request === null || request === undefined) {
      throw new Error(
        'Required parameter request was null or undefined when calling patchSingleItContractInternalV2PatchAddRoleAssignmentByContractuuid.'
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/merge-patch+json', 'application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/v2/internal/it-contracts/${this.configuration.encodeParam({
      name: 'contractUuid',
      value: contractUuid,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'string',
      dataFormat: 'uuid',
    })}/roles/add`;
    return this.httpClient.request<APIItContractResponseDTO>('patch', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Remove an existing role assignment to the it-contract
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public patchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuid(
    requestParameters: PatchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuidRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<APIItContractResponseDTO>;
  public patchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuid(
    requestParameters: PatchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuidRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpResponse<APIItContractResponseDTO>>;
  public patchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuid(
    requestParameters: PatchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuidRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpEvent<APIItContractResponseDTO>>;
  public patchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuid(
    requestParameters: PatchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuidRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<any> {
    const contractUuid = requestParameters.contractUuid;
    if (contractUuid === null || contractUuid === undefined) {
      throw new Error(
        'Required parameter contractUuid was null or undefined when calling patchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuid.'
      );
    }
    const request = requestParameters.request;
    if (request === null || request === undefined) {
      throw new Error(
        'Required parameter request was null or undefined when calling patchSingleItContractInternalV2PatchRemoveRoleAssignmentByContractuuid.'
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/merge-patch+json', 'application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/v2/internal/it-contracts/${this.configuration.encodeParam({
      name: 'contractUuid',
      value: contractUuid,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'string',
      dataFormat: 'uuid',
    })}/roles/remove`;
    return this.httpClient.request<APIItContractResponseDTO>('patch', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: request,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }
}
